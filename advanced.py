# -*- coding: utf-8 -*-
"""emotion_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12QHPz3GsUF4GZa7AnrHrIgddECjX1LrP
"""

! pip install tensorflow

# importation des biblioth√®ques
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
from tensorflow.keras.optimizers import RMSprop
import tensorflow as tf
import matplotlib.pyplot as plt
import cv2
import os
import numpy as np

img = image.load_img('/content/drive/MyDrive/dataset/train/happy/18.PNG')

plt.imshow(img)

cv2.imread('/content/drive/MyDrive/dataset/train/happy/18.PNG').shape

train  = ImageDataGenerator(rescale= 1/255)
validation = ImageDataGenerator(rescale= 1/255)

train_dataset = train.flow_from_directory('/content/drive/MyDrive/dataset/train/', target_size=(200,200), batch_size=5, class_mode = 'binary')
validation_dataset = train.flow_from_directory('/content/drive/MyDrive/dataset/validation', target_size=(200,200), batch_size=5, class_mode = 'binary')

train_dataset.class_indices

model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(200,200,3)),
    tf.keras.layers.MaxPool2D(2,2),
    # first layer
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPool2D(2,2),
    # second layers
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPool2D(2,2),
    #
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPool2D(2,2),
    #
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPool2D(2,2),
    #
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPool2D(2,2),
    # thirts layers 
    tf.keras.layers.Flatten(),
    # Flatten layer
    tf.keras.layers.Dense(512, activation='relu'),
    #Dense layer
    tf.keras.layers.Dense(1, activation='sigmoid')
    # sigmoid layer
])

model.compile(loss='binary_crossentropy', optimizer=RMSprop(learning_rate=0.001), metrics=['accuracy'])

model_fit =model.fit(train_dataset, steps_per_epoch = 5, epochs = 20, validation_data= validation_dataset)

# ploting result 
plt.plot(model_fit.history['loss'], color ='blue', label ='train')
plt.plot(model_fit.history['val_loss'], color ='orange', label ='train')
plt.grid(True)
plt.title('Train and test loss with epochs')
plt.xlabel('Trainning epoch\n', fontsize=12)
plt.ylabel('Trainning and Test loss ', fontsize=12)

# ploting result 
plt.plot(model_fit.history['accuracy'], color ='blue', label ='train')
plt.plot(model_fit.history['val_accuracy'], color ='orange', label ='train')
plt.grid(True)
plt.title('Train and test accuracy with epochs')
plt.xlabel('Trainning epochs', fontsize=12)
plt.ylabel('Trainning and Test accuracy ', fontsize=12)

validation_dataset.class_indices

dir_path = '/content/drive/MyDrive/dataset/test/'

for i in os.listdir(dir_path):
  img = image.load_img(dir_path+'//'+i, target_size=(200,200))
  plt.imshow(img)
  plt.show()

  X = image.img_to_array(img)
  X = np.expand_dims(X,axis=0)
  images = np.vstack([X])
  val = model.predict(images)
  if val == 0:
    print('You are happy')
  else:
    print('you are not happy')

model.save('/content/drive/MyDrive/dataset/modele.h5')

